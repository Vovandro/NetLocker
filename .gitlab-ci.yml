stages:
  - test
  - build
  - deploy

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/

testing:
  stage: test
  image: golang:1.23.4
  extends: .go-cache
  variables:
    CI_REGISTRY_USER: $CI_REGISTRY_USER
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - go mod download
    - go get gotest.tools/gotestsum
    - go run gotest.tools/gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml
  except:
    - tags

coverage:
  stage: test
  image: golang:1.23.4
  extends: .go-cache
  variables:
    CI_REGISTRY_USER: $CI_REGISTRY_USER
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - go mod download
    - go test $(go list ./... | grep -v vendor) -race -coverprofile=coverage.out
    - go get github.com/boumenot/gocover-cobertura
    - go run github.com/boumenot/gocover-cobertura < coverage.out > coverage.xml
    - go tool cover -func=coverage.out
  artifacts:
    paths:
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: /total:\s+\(statements\)\s+(\d+.\d+\%)/
  except:
    - tags

build_docker:
  stage: build
  image: docker:20.10.17
  extends: .go-cache
  services:
    - name: docker:20.10.17-dind
      alias: docker
  variables:
    TAG_NAME: $CI_COMMIT_TAG
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:$TAG_NAME
    CONTAINER_RELEASE_LATEST_IMAGE: $CI_REGISTRY_IMAGE:latest
    CI_REGISTRY_USER: $CI_REGISTRY_USER
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
    CI_REGISTRY: $CI_REGISTRY
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build --build-arg GITHUB_USER=$CI_REGISTRY_USER --build-arg GITHUB_PASS=$CI_REGISTRY_PASSWORD --pull -t $CONTAINER_TEST_IMAGE .
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_LATEST_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - tags
  except:
    - branches